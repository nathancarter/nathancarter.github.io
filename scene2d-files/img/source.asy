
pen p = linewidth(3);

pair hip = (0,0);
pair Rknee = hip + dir(-22.5);
pair Rheel = Rknee + dir(-47.5);
pair Rtoe = Rheel + 0.3dir(45);
pair Lknee = hip + dir(227.5);
pair Lheel = Lknee + dir(182.5);
pair Ltoe = Lheel + 0.3dir(247.5);
pair shoulder = hip + 2dir(77.5);
pair Relbow = shoulder + dir(-22.5);
pair Rhand = Relbow + dir(22.5);
pair Lelbow = shoulder + dir(192.5);
pair Lhand = Lelbow + dir(227.5);

transform T = shift( -Ltoe.x,-Ltoe.y );
transform T1 = T * shift( -6,0.6 );
transform T2 = T * shift( -2,0.2 );

real unit = 2.7inches;
real small = 0.4;
real tick_height = 0.03unit;
real tick_spread = 0.27unit/3;

void my_axes ( picture pic, pen p = black )
{
    draw( pic, (0,-unit)--(0,unit), p, Arrows );
    draw( pic, (-unit,0)--(unit,0), p, Arrows );
    for ( int i = 1 ; i*tick_spread < unit ; ++i ) {
        draw( pic, (i*tick_spread,-tick_height)
                 --(i*tick_spread,tick_height), p );
        draw( pic, (-i*tick_spread,-tick_height)
                 --(-i*tick_spread,tick_height), p );
        draw( pic, (-tick_height,i*tick_spread)
                 --(tick_height,i*tick_spread), p );
        draw( pic, (-tick_height,-i*tick_spread)
                 --(tick_height,-i*tick_spread), p );
        if ( i % 2 == 0 ) {
            label( pic, "$"+string(i)+"$", (i*tick_spread,-tick_height), S );
            label( pic, "$"+string(-i)+"$", (-i*tick_spread,-tick_height), S );
            label( pic, "$"+string(i)+"$", (-tick_height,i*tick_spread), W );
            label( pic, "$"+string(-i)+"$", (-tick_height,-i*tick_spread), W );
        }
    }
    label( pic, "$x$", (unit,0), S, p );
    label( pic, "$y$", (0,unit), E, p );
}
void my_origin ( picture pic, pen p = black )
{
    dot( pic, (0,0), p );
    label( pic, "$O$", (0,0), SE, p );
}
picture blackaxes = new picture;
my_axes( blackaxes );
my_origin( blackaxes );
blackaxes = scale( 3/1inches ) * blackaxes;

picture runner ( pen p = p ) {
    picture result = new picture;
    draw( result, Ltoe--Lheel--Lknee--hip--Rknee--Rheel--Rtoe, p );
    draw( result, hip--interp(hip,shoulder,1.1), p );
    draw( result, Lhand--Lelbow--shoulder--Relbow--Rhand, p );
    fill( result, circle( interp(hip,shoulder,1.3),
                          0.2length(shoulder-hip) ), white );
    draw( result, circle( interp(hip,shoulder,1.3),
                          0.2length(shoulder-hip) ), p );
    return result;
}

transform sc = scale( 30, 30 );
void export ( string name, picture P, bool withAxes = false )
{
    picture pic = new picture;
    if ( withAxes )
        add( pic, sc * blackaxes );
    layer( pic );
    add( pic, sc * P );
    shipout( name, pic );
}

export( "axes", new picture, true );

void declarePoint ( pair p )
{
    write( "        var P = transform( "
         + format( "%f", p.x ) + ", " + format( "%f", -p.y ) + " );" );
}
void drawLine ( pair p, pair q )
{
    declarePoint( p );
    write( "        ctx.moveTo( P[0], P[1] );" );
    declarePoint( q );
    write( "        ctx.lineTo( P[0], P[1] );" );
}
void drawPath ( path ph )
{
    int numsteps = 20;
    real stepsize = 1.0/numsteps;
    for ( real t = 0 ; t <= length(ph) ; t += stepsize ) {
        pair p = point(ph,t);
        declarePoint( p );
        if ( t == 0 )
            write( "        ctx.moveTo( P[0], P[1] );" );
        else
            write( "        ctx.lineTo( P[0], P[1] );" );
    }
}

write( "" );
write( "" );
write( "// " );
write( "// " );
write( "// WARNING" );
write( "// WARNING" );
write( "// " );
write( "// " );
write( "// This file was auto-generated by build.sh in this folder." );
write( "// It is not meant to be edited by humans." );
write( "// See build.sh and source.asy." );
write( "// " );
write( "// " );
write( "// WARNING" );
write( "// WARNING" );
write( "// " );
write( "// " );
write( "" );
write( "" );
write( "var shapes = [ 'runner', 'cap', 'ball' ];" );
write( "" );
write( "" );
write( "function drawShape ( name, transform )" );
write( "{" );
write( "    if ( typeof( transform ) == 'undefined' )" );
write( "        transform = function ( x, y ) { return [x,y]; };" );
write( "    var ctx = Crafty.canvas.context;" );
write( "    ctx.save();" );
write( "    ctx.lineJoin = 'round';" );
write( "    ctx.beginPath();" );

//export( "runner", runner() );
write( "    if ( name == 'runner' ) {" );
drawLine( Ltoe, Lheel );
drawLine( Lheel, Lknee );
drawLine( Lknee, hip );
drawLine( hip, Rknee );
drawLine( Rknee, Rheel );
drawLine( Rheel, Rtoe );
drawLine( hip, interp(hip,shoulder,1.1) );
drawLine( Lhand, Lelbow );
drawLine( Lelbow, shoulder );
drawLine( shoulder, Relbow );
drawLine( Relbow, Rhand );
drawPath( circle( interp(hip,shoulder,1.3), 0.2length(shoulder-hip) ) );
write( "    }" );

//picture cap_picture = new picture;
real rad = 0.2length(shoulder-hip);
//fill( cap_picture, arc( (rad,0), rad, 0, 180 )--cycle, white );
//draw( cap_picture, arc( (rad,0), rad, 0, 180 ), linewidth(2) );
//draw( cap_picture, (0,0)--(3rad,0), linewidth(2) );
//export( "cap", cap_picture );
write( "    if ( name == 'cap' ) {" );
drawPath( arc( (rad,0), rad, 0, 180 ) );
drawLine( (0,0), (3rad,0) );
write( "    }" );

//picture ball_picture = new picture;
real brad = 0.8rad;
real offs = 0.7brad;
real angle = acos(offs/brad)*180/pi;
//fill( ball_picture, circle( (0,0), brad ), white );
//draw( ball_picture, circle( (0,0), brad ), linewidth(2) );
//draw( ball_picture, arc( (-2offs,0), brad, -angle, angle ), linewidth(2) );
//draw( ball_picture, arc( (2offs,0), brad, 180-angle, 180+angle ), linewidth(2) );
//ball_picture = shift( (brad,brad) ) * ball_picture;
//export( "ball", ball_picture );
write( "    if ( name == 'ball' ) {" );
drawPath( circle( (brad,brad), brad ) );
drawPath( arc( (brad-2offs,brad), brad, -angle, angle ) );
drawPath( arc( (brad+2offs,brad), brad, 180-angle, 180+angle ) );
write( "    }" );

write( "    ctx.stroke();" );
write( "}" );
write( "" );
write( "" );

/*
picture all_picture = new picture;
add( all_picture, runner() );
layer( all_picture );
add( all_picture, shift( (0.15,2.7) ) * cap_picture );
layer( all_picture );
add( all_picture, shift( (3,3) ) * ball_picture );
export( "runner-cap-ball", shift( (1,0.35)-Ltoe ) * all_picture );

picture all_picture = new picture;
add( all_picture, runner() );
layer( all_picture );
add( all_picture, shift( (-0.5,2.35) ) * rotate( 60 ) * cap_picture );
layer( all_picture );
add( all_picture, shift( (3,3) ) * ball_picture );
export( "runner-cap-ball-better", shift( (2,0.75)-Ltoe ) * rotate( -20 ) * all_picture );
*/

